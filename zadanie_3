#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>

#define G 5  // Размер графа
// Список смежности
struct Node {
    int vertex;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjList;
};

// Создание нового узла списка смежности
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Создание графа с заданным количеством вершин
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;
    graph->adjList = (struct Node**)malloc(numVertices * sizeof(struct Node*));
    for (int i = 0; i < numVertices; i++) {
        graph->adjList[i] = NULL;
    }
    return graph;
}

// Добавление ребра в граф
void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}

// Обход в ширину графа, представленного списками смежности
void bfs(struct Graph* graph, int start) {
    bool visited[G];
    for (int i = 0; i < G; i++) {
        visited[i] = false;
    }

    int q[G];
    int front = 0, rear = 0;
    visited[start] = true;
    q[rear++] = start;

    while (front != rear) {
        int current = q[front++];
        printf("%d ", current);

        struct Node* temp = graph->adjList[current];
        while (temp != NULL) {
            int adjacentVertex = temp->vertex;
            if (!visited[adjacentVertex]) {
                visited[adjacentVertex] = true;
                q[rear++] = adjacentVertex;
            }
            temp = temp->next;
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    struct Graph* graph = createGraph(G);

    // Генерация случайных рёбер для неориентированного графа
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            if (rand() % 2 == 1) {
                addEdge(graph, i, j);
            }
        }
    }

    // Вывод графа в виде списков смежности
    printf("Списки смежности:\n");
    for (int i = 0; i < G; i++) {
        printf("%d: ", i);
        struct Node* temp = graph->adjList[i];
        while (temp != NULL) {
            printf("%d ", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }

    // Обход в ширину, начиная с вершины 0
    printf("Обход в ширину: ");
    bfs(graph, 0);
    printf("\n");

    return 0;
}
